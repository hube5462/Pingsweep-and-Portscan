#Author:	Aaron Huber
#Date:		5/2015

#This python script will perform a pingsweep on a given network, port scan the hosts that are up,
#and store the results in a MySQL database

import socket	#to create sockets
import sys	#to take in arguments from command line
import subprocess	#to run shell commands
import threading	#for multi-tasking
import MySQLdb		#for storing results in mysql database

networkprefix = sys.argv[1]					#capture the IP from the command line
list = [20, 21, 22, 23, 25, 80, 135, 139, 445, 443, 9999]	#list holds the ports to scan
results=[]							#holds portscan information
addresslist=[]							#holds ip addresses that are up

db = MySQLdb.connect(host="localhost", user="root", passwd="", db="port_scan")
cur = db.cursor()
sql = "TRUNCATE result"				#sql to clear table result

try:
	cur.execute(sql)					#run the query to clear the table
	db.commit()						#commit the changes to the database
except:
	db.rollback()						#rollback if there is any error

def tryping(ip):						#function to ping network address
	try:
		ping_result = subprocess.check_output("ping -c 1 %s" % ip, shell=True)	#ping the ip address
		print "Host Discovered: %s" % ip		#print updated info to terminal
		addresslist.append(ip)				#add live ip to the address book
	except:
		pass

for i in range(1, 255):						#enumerate through possible host addresses
	temp = "%s.%s" % (networkprefix, str(i))		#create a string of the ip address
	T = threading.Thread(target=tryping, args=(temp,))	#create a thread to ping the address
	T.start()


for ip in addresslist:
	print "\nScanning %s" % ip
	for port in list:					#scan each port in the list
		try:
			s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 		#create IPv4 tcp socket
			s.settimeout(2)				
			s.connect((ip, port))			#establish a connection
			try:
				banner = s.recv(4096)		#grab the banner
				results.append("%i \t %s" % (port, banner))	#store the results for terminal output
			except:
				results.append("%i \t %s" % (port, "NO BANNER PROVIDED"))	#store the port with 

		except socket.error, e:
			results.append("%i \t %s" % (port, e))	#store the port with the error message
		s.close()

	for r in results:
		print r
		try:
			sql = "INSERT INTO result VALUES ('%s', '%s')" % (ip, r)
			cur.execute(sql)
			db.commit()
		except:
			db.rollback()

	results=[]